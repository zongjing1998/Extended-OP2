//
// auto-generated by op2.py
//

//header
#ifdef GPUPASS
#define op_par_loop_hour_caldt op_par_loop_hour_caldt_gpu
#define op_par_loop_hour_ele op_par_loop_hour_ele_gpu
#define op_par_loop_recons_1wh op_par_loop_recons_1wh_gpu
#define op_par_loop_hour_ele2 op_par_loop_hour_ele2_gpu
#define op_par_loop_recons_0wh op_par_loop_recons_0wh_gpu
#define op_par_loop_rhscal_auxsideflux op_par_loop_rhscal_auxsideflux_gpu
#define op_par_loop_rhscal_auxsideflux2 op_par_loop_rhscal_auxsideflux2_gpu
#define op_par_loop_rhscal_auxvar op_par_loop_rhscal_auxvar_gpu
#define op_par_loop_rhscal_calsideflux op_par_loop_rhscal_calsideflux_gpu
#define op_par_loop_rhscal_calsideflux2 op_par_loop_rhscal_calsideflux2_gpu
#define op_par_loop_rhscal op_par_loop_rhscal_gpu
#include "hour2d_kernels.cu"
#undef op_par_loop_hour_caldt
#undef op_par_loop_hour_ele
#undef op_par_loop_recons_1wh
#undef op_par_loop_hour_ele2
#undef op_par_loop_recons_0wh
#undef op_par_loop_rhscal_auxsideflux
#undef op_par_loop_rhscal_auxsideflux2
#undef op_par_loop_rhscal_auxvar
#undef op_par_loop_rhscal_calsideflux
#undef op_par_loop_rhscal_calsideflux2
#undef op_par_loop_rhscal
#else
#define op_par_loop_hour_caldt op_par_loop_hour_caldt_cpu
#define op_par_loop_hour_ele op_par_loop_hour_ele_cpu
#define op_par_loop_recons_1wh op_par_loop_recons_1wh_cpu
#define op_par_loop_hour_ele2 op_par_loop_hour_ele2_cpu
#define op_par_loop_recons_0wh op_par_loop_recons_0wh_cpu
#define op_par_loop_rhscal_auxsideflux op_par_loop_rhscal_auxsideflux_cpu
#define op_par_loop_rhscal_auxsideflux2 op_par_loop_rhscal_auxsideflux2_cpu
#define op_par_loop_rhscal_auxvar op_par_loop_rhscal_auxvar_cpu
#define op_par_loop_rhscal_calsideflux op_par_loop_rhscal_calsideflux_cpu
#define op_par_loop_rhscal_calsideflux2 op_par_loop_rhscal_calsideflux2_cpu
#define op_par_loop_rhscal op_par_loop_rhscal_cpu
#include "../openmp/hour2d_kernels.cpp"
#undef op_par_loop_hour_caldt
#undef op_par_loop_hour_ele
#undef op_par_loop_recons_1wh
#undef op_par_loop_hour_ele2
#undef op_par_loop_recons_0wh
#undef op_par_loop_rhscal_auxsideflux
#undef op_par_loop_rhscal_auxsideflux2
#undef op_par_loop_rhscal_auxvar
#undef op_par_loop_rhscal_calsideflux
#undef op_par_loop_rhscal_calsideflux2
#undef op_par_loop_rhscal

//user kernel files

void op_par_loop_hour_caldt_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_hour_caldt(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_hour_caldt_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_hour_caldt_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_hour_caldt(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_hour_caldt_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_hour_ele_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_hour_ele(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_hour_ele_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_hour_ele_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_hour_ele(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_hour_ele_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_recons_1wh_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_recons_1wh(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_recons_1wh_gpu(name, set,
      arg0);

    }else{
    op_par_loop_recons_1wh_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_recons_1wh(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_recons_1wh_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_hour_ele2_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_hour_ele2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  if (OP_hybrid_gpu) {
    op_par_loop_hour_ele2_gpu(name, set,
      arg0,
      arg1);

    }else{
    op_par_loop_hour_ele2_cpu(name, set,
      arg0,
      arg1);

  }
}
#else
void op_par_loop_hour_ele2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  op_par_loop_hour_ele2_gpu(name, set,
    arg0,
    arg1);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_recons_0wh_gpu(char const *name, op_set set,
  op_arg arg0);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_recons_0wh(char const *name, op_set set,
  op_arg arg0){

  if (OP_hybrid_gpu) {
    op_par_loop_recons_0wh_gpu(name, set,
      arg0);

    }else{
    op_par_loop_recons_0wh_cpu(name, set,
      arg0);

  }
}
#else
void op_par_loop_recons_0wh(char const *name, op_set set,
  op_arg arg0){

  op_par_loop_recons_0wh_gpu(name, set,
    arg0);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_rhscal_auxsideflux_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_rhscal_auxsideflux(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  if (OP_hybrid_gpu) {
    op_par_loop_rhscal_auxsideflux_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

    }else{
    op_par_loop_rhscal_auxsideflux_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

  }
}
#else
void op_par_loop_rhscal_auxsideflux(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  op_par_loop_rhscal_auxsideflux_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_rhscal_auxsideflux2_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_rhscal_auxsideflux2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_rhscal_auxsideflux2_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_rhscal_auxsideflux2_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_rhscal_auxsideflux2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_rhscal_auxsideflux2_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_rhscal_auxvar_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_rhscal_auxvar(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  if (OP_hybrid_gpu) {
    op_par_loop_rhscal_auxvar_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

    }else{
    op_par_loop_rhscal_auxvar_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3);

  }
}
#else
void op_par_loop_rhscal_auxvar(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3){

  op_par_loop_rhscal_auxvar_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_rhscal_calsideflux_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_rhscal_calsideflux(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  if (OP_hybrid_gpu) {
    op_par_loop_rhscal_calsideflux_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

    }else{
    op_par_loop_rhscal_calsideflux_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

  }
}
#else
void op_par_loop_rhscal_calsideflux(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  op_par_loop_rhscal_calsideflux_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_rhscal_calsideflux2_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_rhscal_calsideflux2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  if (OP_hybrid_gpu) {
    op_par_loop_rhscal_calsideflux2_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

    }else{
    op_par_loop_rhscal_calsideflux2_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5);

  }
}
#else
void op_par_loop_rhscal_calsideflux2(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  op_par_loop_rhscal_calsideflux2_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4,
    arg5);

  }
#endif //OP_HYBRID_GPU

void op_par_loop_rhscal_gpu(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4);

//GPU host stub function
#if OP_HYBRID_GPU
void op_par_loop_rhscal(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  if (OP_hybrid_gpu) {
    op_par_loop_rhscal_gpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

    }else{
    op_par_loop_rhscal_cpu(name, set,
      arg0,
      arg1,
      arg2,
      arg3,
      arg4);

  }
}
#else
void op_par_loop_rhscal(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  op_par_loop_rhscal_gpu(name, set,
    arg0,
    arg1,
    arg2,
    arg3,
    arg4);

  }
#endif //OP_HYBRID_GPU
#endif
