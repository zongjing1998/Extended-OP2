//
// auto-generated by op2.py
//

//user function
__device__ void rhscal_auxvar_gpu( const side **psid, const int *aele, const elem *pele, uvar *pvar) {
	double xix = (*pele).LocdGlb[0][0];
	double xiy = (*pele).LocdGlb[0][1];
	double etx = (*pele).LocdGlb[1][0];
	double ety = (*pele).LocdGlb[1][1];

	int nfvord = (*pvar).pfv;
	int nfvdof = DOFofOrd2d_cuda[nfvord];


	for (int i = 0; i < NDIM; i++)
		for (int j = 0; j < MAXFVDOF; j++)
			for (int k = 0; k < NEQ; k++)
				(*pvar).grad[i][j][k] = 0;

	int nqdord = nfvord + nfvord;
	if (nqdord < 1)
		nqdord = 1;

	int nType = ELEMTYPE;
#ifdef QUAD
	const int *inode = (*pele).Node;
	if (inode[3] == inode[0])
		nType = 3;
#endif
	int nqdpt;
	double(*EmQdCoe)[4], (*EmQdBas)[MAXFVDOF], (*EmQdBasDxi)[MAXFVDOF], (*EmQdBasDet)[MAXFVDOF];

	if (nType == 3)
	{
		nqdpt = SymQdTriDim_cuda[nqdord];
		EmQdCoe = (double(*)[4])SymQdTriCoe_cuda[nqdord];
		EmQdBas = (double(*)[MAXFVDOF])QdPtBasTri_cuda[nqdord];
		EmQdBasDxi = (double(*)[MAXFVDOF])QdPtBasDxiTri_cuda[nqdord];
		EmQdBasDet = (double(*)[MAXFVDOF])QdPtBasDetTri_cuda[nqdord];
	}
	else
	{

		nqdpt = QdNOrd2NPt1d_cuda[nqdord];
		EmQdCoe = (double(*)[4])QdPtCoeRect_cuda[nqdpt];
		EmQdBas = (double(*)[MAXFVDOF])QdPtBasRect_cuda[nqdpt];
		EmQdBasDxi = (double(*)[MAXFVDOF])QdPtBasDxiRect_cuda[nqdpt];
		EmQdBasDet = (double(*)[MAXFVDOF])QdPtBasDetRect_cuda[nqdpt];
		nqdpt *= nqdpt;
	}

	side psid_temp[4];

	for (int i = 0; i < 4; i++)
	{
		psid_temp[i].Node[0] = psid[i][0].Node[0];
		psid_temp[i].Node[1] = psid[i][0].Node[1];
		psid_temp[i].ofElem[0] = psid[i][0].ofElem[0];
		psid_temp[i].ofElem[1] = psid[i][0].ofElem[1];
		psid_temp[i].lsdidx[0] = psid[i][0].lsdidx[0];
		psid_temp[i].lsdidx[1] = psid[i][0].lsdidx[1];
		psid_temp[i].dl = psid[i][0].dl;
		for (int jj = 0; jj < NDIM; jj++)
			psid_temp[i].norm[jj] = psid[i][0].norm[jj];
		psid_temp[i].etaf = psid[i][0].etaf;
		psid_temp[i].nqdpt = psid[i][0].nqdpt;
		for (int np = 0; np < 5; np++)
		{
			for (int j = 0; j < NEQ; j++)
			{

				psid_temp[i].flux[np][j] = psid[i][0].flux[np][j];
			}
		}
	}
	double grad_temp[NDIM][MAXFVDOF][NEQ];
	for (int i = 0; i < NDIM; i++)
	{
		for (int j = 0; j < MAXFVDOF; j++)
		{
			for (int k = 0; k < NEQ; k++)
			{
				grad_temp[i][j][k] = (*pvar).grad[i][j][k];
			}
		}
	}


	for (int qd = 0; qd < nqdpt; qd++)
	{
		double coe = EmQdCoe[qd][3];

		double tcv[NEQ];
		GetVar_gpu(nfvdof, (*pvar).wh, EmQdBas[qd], tcv);

#if AUXVARIABLE == PRIMITI
		double tpv[NEQ];
		CV2PV_gpu(tcv, (*pvar).wh[0], tpv);
		tpv[NEQ - 1] /= tpv[0] * (param_cuda.R);
		for (int j = 0; j < NEQ; j++)
			tcv[j] = tpv[j];
#endif
		for (int j = 0; j < NEQ; j++)
			tcv[j] *= coe;

		for (int k = 0; k < NDIM; k++)
			for (int i = 0; i < nfvdof; i++)
			{
				double basxy[NDIM];
				basxy[0] = EmQdBasDxi[qd][i] * xix + EmQdBasDet[qd][i] * etx;
				basxy[1] = EmQdBasDxi[qd][i] * xiy + EmQdBasDet[qd][i] * ety;

				for (int j = 0; j < NEQ; j++)
					grad_temp[k][i][j] -= tcv[j] * basxy[k];

			}
	}

	for (int ts = 0; ts < nType; ts++)
	{


		double norm[NDIM];
		for (int nd = 0; nd < NDIM; nd++)
			norm[nd] = psid[ts][0].norm[nd];

		int nqdpt = psid[ts][0].nqdpt;
		double dldds = -psid[ts][0].dl * (*pele).volr;
		int sign = 1;
		int baspos = 0;

		if (((int)*aele) == psid[ts][0].ofElem[1])
		{
			dldds = -dldds;
			sign = -1;
			baspos = nqdpt - 1;
		}

		for (int np = 0; np < nqdpt; np++, baspos += sign)
		{
			double *tmbas;
			if (nType == 3)
				tmbas = SdQdPtBasTri_cuda[ts][nqdpt][baspos];
			else
				tmbas = SdQdPtBasRect_cuda[ts][nqdpt][baspos];
			double quadcoe = GauQd1dCoe_cuda[nqdpt][np][2] * dldds;
			for (int k = 0; k < NDIM; k++)
				for (int i = 0; i < nfvdof; i++)
				{
					double temp = quadcoe * tmbas[i];
					for (int j = 0; j < NEQ; j++)
					{
						double temp2 = temp * psid[ts][0].flux[np][j];


						grad_temp[k][i][j] += temp2 * norm[k];
					}
				}
		}
	}

	for (int i = 0; i < NDIM; i++)
	{
		for (int j = 0; j < MAXFVDOF; j++)
		{
			for (int k = 0; k < NEQ; k++)
			{
				(*pvar).grad[i][j][k] = grad_temp[i][j][k];
			}
		}
	}

}

// CUDA kernel function
__global__ void op_cuda_rhscal_auxvar(
  const side *__restrict ind_arg0,
  const int *__restrict opDat0Map,
  const int *__restrict arg4,
  const elem *__restrict arg5,
  uvar *arg6,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];
    map2idx = opDat0Map[n + set_size * 2];
    map3idx = opDat0Map[n + set_size * 3];
    const side* arg0_vec[] = {
       &ind_arg0[1 * map0idx],
       &ind_arg0[1 * map1idx],
       &ind_arg0[1 * map2idx],
       &ind_arg0[1 * map3idx]};

    //user-supplied kernel call
    rhscal_auxvar_gpu(arg0_vec,
                  arg4+n*1,
                  arg5+n*1,
                  arg6+n*1);
  }
}


//host stub function
void op_par_loop_rhscal_auxvar(char const *name, op_set set,
  op_arg arg0,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6){

  int nargs = 7;
  op_arg args[7];

  arg0.idx = 0;
  args[0] = arg0;
  for ( int v=1; v<4; v++ ){
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 1, "side", OP_READ);
  }

  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(7);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[7].name      = name;
  OP_kernels[7].count    += 1;


  int    ninds   = 1;
  int    inds[7] = {0,0,0,0,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: rhscal_auxvar\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_7
      int nthread = OP_BLOCK_SIZE_7;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_rhscal_auxvar<<<nblocks,nthread>>>(
        (side *)arg0.data_d,
        arg0.map_data_d,
        (int*)arg4.data_d,
        (elem*)arg5.data_d,
        (uvar*)arg6.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[7].time     += wall_t2 - wall_t1;
}
