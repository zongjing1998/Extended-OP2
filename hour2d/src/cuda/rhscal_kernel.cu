//
// auto-generated by op2.py
//

__constant__ int opDat0_rhscal_stride_OP2CONSTANT;
int opDat0_rhscal_stride_OP2HOST=-1;
__constant__ int direct_rhscal_stride_OP2CONSTANT;
int direct_rhscal_stride_OP2HOST=-1;
//user function
__device__ void rhscal_gpu( const side **psid, const int *aele, const elem *pele, double *rhs, uvar *pvar) {
	int pdg = (*pvar).pdg;
	int ndgdof = DOFofOrd2d_cuda[pdg];



	for (int j = 0; j < ndgdof; j++)
	{
		for (int k = 0; k < 4; k++)
		{
			rhs[(j * 4 + k)*direct_rhscal_stride_OP2CONSTANT] = 0;
		}
	}

	int nType = ELEMTYPE;
#ifdef QUAD
	const int *inode = (*pele).Node;
	if (inode[3] == inode[0])
		nType = 3;
#endif
	double(*SdQdBas)[MAXSEGQDPTS + 1][MAXSEGQDPTS][MAXFVDOF];
	if (nType == 3)
		SdQdBas = (double(*)[MAXSEGQDPTS + 1][MAXSEGQDPTS][MAXFVDOF]) SdQdPtBasTri_cuda;
	else
		SdQdBas = (double(*)[MAXSEGQDPTS + 1][MAXSEGQDPTS][MAXFVDOF]) SdQdPtBasRect_cuda;
	for (int ts = 0; ts < nType; ts++)
	{

		int nqdpt = psid[ts][0].nqdpt;

		double dldds, (*Bas)[MAXFVDOF];
		if (((int)*aele) == psid[ts][0].ofElem[1])
		{
			dldds = -psid[ts][0].dl * (*pele).volr;
			Bas = (double(*)[MAXFVDOF])(&SdQdBas[ts + nType][nqdpt][0][0]);
		}
		else
		{
			dldds = psid[ts][0].dl * (*pele).volr;
			Bas = (double(*)[MAXFVDOF])(&SdQdBas[ts][nqdpt][0][0]);
		}

		for (int qd = 0; qd < nqdpt; qd++)
		{
			double coe = QdPtCoe1d_cuda[nqdpt][qd][1] * dldds;

			double fluxcoe[NEQ];
			for (int j = 0; j < NEQ; j++)
				fluxcoe[j] = psid[ts][0].flux[qd][j] * coe;

			for (int i = 0; i < ndgdof; i++)
				for (int j = 0; j < NEQ; j++)
				{
					rhs[(i * 4 + j)*direct_rhscal_stride_OP2CONSTANT] += fluxcoe[j] * Bas[qd][i];

				}
		}
	}


	int pfv = (*pvar).pfv;
	int nfvdof = DOFofOrd2d_cuda[pfv];
	int nqdord = pfv + pdg - 1;
	int nqdpt;
	double(*EmQdCoe)[4], (*EmQdBas)[MAXFVDOF], (*EmQdBasDxi)[MAXFVDOF], (*EmQdBasDet)[MAXFVDOF];
	if (nType == 3)
	{
		nqdpt = SymQdTriDim_cuda[nqdord];
		EmQdCoe = (double(*)[4])SymQdTriCoe_cuda[nqdord];
		EmQdBas = (double(*)[MAXFVDOF])QdPtBasTri_cuda[nqdord];
		EmQdBasDxi = (double(*)[MAXFVDOF])QdPtBasDxiTri_cuda[nqdord];
		EmQdBasDet = (double(*)[MAXFVDOF])QdPtBasDetTri_cuda[nqdord];
	}
	else
	{
		nqdpt = QdNOrd2NPt1d_cuda[nqdord];
		EmQdCoe = (double(*)[4])QdPtCoeRect_cuda[nqdpt];
		EmQdBas = (double(*)[MAXFVDOF])QdPtBasRect_cuda[nqdpt];
		EmQdBasDxi = (double(*)[MAXFVDOF])QdPtBasDxiRect_cuda[nqdpt];
		EmQdBasDet = (double(*)[MAXFVDOF])QdPtBasDetRect_cuda[nqdpt];
		nqdpt *= nqdpt;
	}
	double xix = (*pele).LocdGlb[0][0];
	double xiy = (*pele).LocdGlb[0][1];
	double etx = (*pele).LocdGlb[1][0];
	double ety = (*pele).LocdGlb[1][1];

	for (int qd = 0; qd < nqdpt; qd++)
	{

		double tcv[NEQ];
		GetVar_gpu(nfvdof, (*pvar).wh, EmQdBas[qd], tcv);
		double flux[NDIM][NEQ];
#if EQUATIO == ADVECTI
		for (int j = 0; j < NEQ; j++)
		{
			flux[0][j] = param_cuda.a * tcv[j];
			flux[1][j] = param_cuda.b * tcv[j];
		}
#elif EQUATIO == BURGERS
		for (int j = 0; j < NEQ; j++)
		{
			double tmp = 0.5 * tcv[j] * tcv[j];
			flux[0][j] = tmp * param_cuda.a;
			flux[1][j] = tmp * param_cuda.b;
		}
#elif EQUATIO == EULNSEQ
#if VARIABLE == CONSERV
		CV2FluxI_gpu(tcv, (*pvar).wh[0], flux);
#elif VARIABLE == PRIMITI
		PV2FluxI_gpu(tcv, flux);
#endif
#endif
		if (param_cuda.ivis == 1)
		{
			double graduh[NDIM][NEQ];
			for (int i = 0; i < NDIM; i++)
				GetVar_gpu(nfvdof, (*pvar).grad[i], EmQdBas[qd], graduh[i]);
			double fluxV[NDIM][NEQ];
			CalFluxV_gpu(tcv, (*pvar).wh[0], graduh, &param_cuda, fluxV);

			for (int i = 0; i < NDIM; i++)
				for (int j = 0; j < NEQ; j++)
					flux[i][j] -= fluxV[i][j];
		}

		double coe = EmQdCoe[qd][3];
		for (int i = 1; i < ndgdof; i++)
		{
			double basxcoe = (EmQdBasDxi[qd][i] * xix + EmQdBasDet[qd][i] * etx) * coe;
			double basycoe = (EmQdBasDxi[qd][i] * xiy + EmQdBasDet[qd][i] * ety) * coe;

			for (int j = 0; j < NEQ; j++)
			{
				rhs[(i * 4 + j)*direct_rhscal_stride_OP2CONSTANT] += (flux[0][j] * basxcoe + flux[1][j] * basycoe);

			}
		}
	}


}

// CUDA kernel function
__global__ void op_cuda_rhscal(
  const side *__restrict ind_arg0,
  const int *__restrict opDat0Map,
  const int *__restrict arg4,
  const elem *__restrict arg5,
  double *arg6,
  uvar *arg7,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];
    map2idx = opDat0Map[n + set_size * 2];
    map3idx = opDat0Map[n + set_size * 3];
    const side* arg0_vec[] = {
       &ind_arg0[1 * map0idx],
       &ind_arg0[1 * map1idx],
       &ind_arg0[1 * map2idx],
       &ind_arg0[1 * map3idx]};

    //user-supplied kernel call
    rhscal_gpu(arg0_vec,
           arg4+n*1,
           arg5+n*1,
           arg6+n,
           arg7+n*1);
  }
}


//host stub function
void op_par_loop_rhscal(char const *name, op_set set,
  op_arg arg0,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  arg0.idx = 0;
  args[0] = arg0;
  for ( int v=1; v<4; v++ ){
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 1, "side", OP_READ);
  }

  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(10);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[10].name      = name;
  OP_kernels[10].count    += 1;


  int    ninds   = 1;
  int    inds[8] = {0,0,0,0,-1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: rhscal\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    if ((OP_kernels[10].count==1) || (opDat0_rhscal_stride_OP2HOST != getSetSizeFromOpArg(&arg0))) {
      opDat0_rhscal_stride_OP2HOST = getSetSizeFromOpArg(&arg0);
      cudaMemcpyToSymbol(opDat0_rhscal_stride_OP2CONSTANT, &opDat0_rhscal_stride_OP2HOST,sizeof(int));
    }
    if ((OP_kernels[10].count==1) || (direct_rhscal_stride_OP2HOST != getSetSizeFromOpArg(&arg6))) {
      direct_rhscal_stride_OP2HOST = getSetSizeFromOpArg(&arg6);
      cudaMemcpyToSymbol(direct_rhscal_stride_OP2CONSTANT,&direct_rhscal_stride_OP2HOST,sizeof(int));
    }
    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_10
      int nthread = OP_BLOCK_SIZE_10;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_rhscal<<<nblocks,nthread>>>(
        (side *)arg0.data_d,
        arg0.map_data_d,
        (int*)arg4.data_d,
        (elem*)arg5.data_d,
        (double*)arg6.data_d,
        (uvar*)arg7.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[10].time     += wall_t2 - wall_t1;
}
