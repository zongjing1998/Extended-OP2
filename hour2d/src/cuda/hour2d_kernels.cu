//
// auto-generated by op2.py
//

#include "user_cuda.h"
//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 2500
#endif

__constant__ int DOFofOrd2d_cuda[16];
__constant__ int SymQdTriDim_cuda[7];
__constant__ int QdNOrd2NPt1d_cuda[10];
__constant__ double GauQd1dCoe_cuda[6][5][3];
__constant__ double QdPtCoe1d_cuda[(MAXSEGQDPTS + 1)][MAXSEGQDPTS][2];
__constant__ para param_cuda;
__constant__ double SymQdTriCoe_cuda[7][12][4];
__constant__ double QdPtBasTri_cuda[7][12][10];
__constant__ double QdPtCoeRect_cuda[6][25][4];
__constant__ double QdPtBasRect_cuda[6][25][10];
__constant__ double SdQdPtBasTri_cuda[6][6][5][10];
__constant__ double SdQdPtBasRect_cuda[8][6][5][10];
__device__ double QdPtBasDxiTri_cuda[7][12][10];
__device__ double QdPtBasDetTri_cuda[7][12][10];
__device__ double QdPtBasDxiRect_cuda[6][25][10];
__device__ double QdPtBasDetRect_cuda[6][25][10];

//header
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

void op_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (!OP_hybrid_gpu) return;
  if (!strcmp(name,"DOFofOrd2d")) {
    if (!strcmp(name,"DOFofOrd2d") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(DOFofOrd2d_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"SymQdTriDim")) {
    if (!strcmp(name,"SymQdTriDim") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(SymQdTriDim_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdNOrd2NPt1d")) {
    if (!strcmp(name,"QdNOrd2NPt1d") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdNOrd2NPt1d_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"GauQd1dCoe")) {
    if (!strcmp(name,"GauQd1dCoe") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(GauQd1dCoe_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtCoe1d")) {
    if (!strcmp(name,"QdPtCoe1d") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtCoe1d_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"param")) {
    cutilSafeCall(cudaMemcpyToSymbol(param_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"SymQdTriCoe")) {
    if (!strcmp(name,"SymQdTriCoe") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(SymQdTriCoe_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtBasTri")) {
    if (!strcmp(name,"QdPtBasTri") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtBasTri_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtCoeRect")) {
    if (!strcmp(name,"QdPtCoeRect") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtCoeRect_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtBasRect")) {
    if (!strcmp(name,"QdPtBasRect") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtBasRect_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"SdQdPtBasTri")) {
    if (!strcmp(name,"SdQdPtBasTri") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(SdQdPtBasTri_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"SdQdPtBasRect")) {
    if (!strcmp(name,"SdQdPtBasRect") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(SdQdPtBasRect_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtBasDxiTri")) {
    if (!strcmp(name,"QdPtBasDxiTri") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtBasDxiTri_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtBasDetTri")) {
    if (!strcmp(name,"QdPtBasDetTri") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtBasDetTri_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtBasDxiRect")) {
    if (!strcmp(name,"QdPtBasDxiRect") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtBasDxiRect_cuda, dat, dim*size));
  }
  else
  if (!strcmp(name,"QdPtBasDetRect")) {
    if (!strcmp(name,"QdPtBasDetRect") && size>MAX_CONST_SIZE) {
      printf("error: MAX_CONST_SIZE not big enough\n"); exit(1);
    }
    cutilSafeCall(cudaMemcpyToSymbol(QdPtBasDetRect_cuda, dat, dim*size));
  }
  else
  {
    printf("error: unknown const name\n"); exit(1);
  }
}

//user kernel files
#include "hour_caldt_kernel.cu"
#include "hour_ele_kernel.cu"
#include "recons_1wh_kernel.cu"
#include "hour_ele2_kernel.cu"
#include "recons_0wh_kernel.cu"
#include "rhscal_auxsideflux_kernel.cu"
#include "rhscal_auxsideflux2_kernel.cu"
#include "rhscal_auxvar_kernel.cu"
#include "rhscal_calsideflux_kernel.cu"
#include "rhscal_calsideflux2_kernel.cu"
#include "rhscal_kernel.cu"
