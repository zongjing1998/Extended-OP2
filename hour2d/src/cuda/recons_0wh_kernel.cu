//
// auto-generated by op2.py
//

//user function
__device__ void recons_0wh_gpu( uvar *pvar) {
		unsigned int pdg    = (*pvar).pdg;
		unsigned int pfv    = (*pvar).pfv;
		unsigned int ndgdof = DOFofOrd2d_cuda[pdg];
		unsigned int nfvdof = DOFofOrd2d_cuda[pfv];

		for( unsigned int i=0; i<ndgdof; i++ )
		for( unsigned int j=0; j<NEQ;    j++ )
			(*pvar).wh[i][j] = (*pvar).uh[0][i][j];

		for( unsigned int i=ndgdof; i<nfvdof; i++ )
		for( unsigned int j=0; j<NEQ;         j++ )
			(*pvar).wh[i][j] = 0.0;

}

// CUDA kernel function
__global__ void op_cuda_recons_0wh(
  uvar *arg0,
  int   set_size ) {


  //process set elements
  for ( int n=threadIdx.x+blockIdx.x*blockDim.x; n<set_size; n+=blockDim.x*gridDim.x ){

    //user-supplied kernel call
    recons_0wh_gpu(arg0+n*1);
  }
}


//host stub function
void op_par_loop_recons_0wh(char const *name, op_set set,
  op_arg arg0){

  int nargs = 1;
  op_arg args[1];

  args[0] = arg0;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[4].name      = name;
  OP_kernels[4].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  recons_0wh");
  }

  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_4
      int nthread = OP_BLOCK_SIZE_4;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    op_cuda_recons_0wh<<<nblocks,nthread>>>(
      (uvar *) arg0.data_d,
      set->size );
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].time     += wall_t2 - wall_t1;
  OP_kernels[4].transfer += (float)set->size * arg0.size * 2.0f;
}
